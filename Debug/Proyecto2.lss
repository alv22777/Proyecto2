
Proyecto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d3  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000690  00000000  00000000  00000ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000341  00000000  00000000  00001157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001498  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  0000152c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009f  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9e:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART9600>:
			ADCSRA |= (1<<ADSC);
											
    }
}

void initUART9600(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	//Rx as input, Tx as output
	DDRD &= ~(1<<DDD0);
  aa:	8a b1       	in	r24, 0x0a	; 10
  ac:	8e 7f       	andi	r24, 0xFE	; 254
  ae:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD1);
  b0:	8a b1       	in	r24, 0x0a	; 10
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;	UCSR0B = 0; UCSR0C = 0; //Initial values
  b6:	c0 ec       	ldi	r28, 0xC0	; 192
  b8:	d0 e0       	ldi	r29, 0x00	; 0
  ba:	18 82       	st	Y, r1
  bc:	a1 ec       	ldi	r26, 0xC1	; 193
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	1c 92       	st	X, r1
  c2:	e2 ec       	ldi	r30, 0xC2	; 194
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	UCSR0A |= (0<<U2X0); //UCSR0A Config
  c8:	88 81       	ld	r24, Y
  ca:	88 83       	st	Y, r24
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0)|(0<<UCSZ02); //UCSR0B Config.
  cc:	8c 91       	ld	r24, X
  ce:	88 69       	ori	r24, 0x98	; 152
  d0:	8c 93       	st	X, r24
	UCSR0C |= (0<<UMSEL01)|(0<<UMSEL00)|(0<<UPM01)|(0<<UPM00)|(0<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00); //UCSR0C Config.
  d2:	80 81       	ld	r24, Z
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
	UBRR0 = 103;
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <initADC>:

void initADC(void){
	ADMUX = 0;
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0)|(0<<REFS1)|(0<<ADLAR);
  f0:	80 81       	ld	r24, Z
  f2:	80 64       	ori	r24, 0x40	; 64
  f4:	80 83       	st	Z, r24
	ADCSRA = 0;
  f6:	ea e7       	ldi	r30, 0x7A	; 122
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN);
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADIE);
 102:	80 81       	ld	r24, Z
 104:	88 60       	ori	r24, 0x08	; 8
 106:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 108:	80 81       	ld	r24, Z
 10a:	87 60       	ori	r24, 0x07	; 7
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <initT1>:
}

void initT1(void){
	//setup OC1A, OC1B as non inverting (clear when compare)
	TCCR1A |= (1<<COM1A1)|(0<<COM1A0);
 110:	e0 e8       	ldi	r30, 0x80	; 128
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	80 68       	ori	r24, 0x80	; 128
 118:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1B1)|(0<<COM1B0);
 11a:	80 81       	ld	r24, Z
 11c:	80 62       	ori	r24, 0x20	; 32
 11e:	80 83       	st	Z, r24
	
	//Set fast PWM mode for Timer1. TOP = ICR1
	TCCR1A |= (1<<WGM11)|(0<<WGM10);
 120:	80 81       	ld	r24, Z
 122:	82 60       	ori	r24, 0x02	; 2
 124:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13)|(1<<WGM12);
 126:	e1 e8       	ldi	r30, 0x81	; 129
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 61       	ori	r24, 0x18	; 24
 12e:	80 83       	st	Z, r24
	TCCR1B |= (0<<CS12)|(1<<CS11)|(0<<CS10);//Prescaler 1/8 Tmax = 32768 µs
 130:	80 81       	ld	r24, Z
 132:	82 60       	ori	r24, 0x02	; 2
 134:	80 83       	st	Z, r24
	ICR1 = 39999;
 136:	8f e3       	ldi	r24, 0x3F	; 63
 138:	9c e9       	ldi	r25, 0x9C	; 156
 13a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 13e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 142:	08 95       	ret

00000144 <main>:


int main(void)
{
    //SETUP
	cli();
 144:	f8 94       	cli
	DDRB |= 0b1111111; //PORTB as output
 146:	84 b1       	in	r24, 0x04	; 4
 148:	8f 67       	ori	r24, 0x7F	; 127
 14a:	84 b9       	out	0x04, r24	; 4
	
	initUART9600();
 14c:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART9600>
	initADC();
 150:	0e 94 75 00 	call	0xea	; 0xea <initADC>
	initT1();
 154:	0e 94 88 00 	call	0x110	; 0x110 <initT1>
	sei();
 158:	78 94       	sei
				//break;
				//
				//
		//}
			//_delay_us(10);
			OCR1A = Ser0_LR_LeftEye;
 15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 166:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			_delay_ms(0);	
			ADCSRA |= (1<<ADSC);
 16a:	ea e7       	ldi	r30, 0x7A	; 122
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	80 64       	ori	r24, 0x40	; 64
 172:	80 83       	st	Z, r24
 174:	f2 cf       	rjmp	.-28     	; 0x15a <main+0x16>

00000176 <__vector_21>:
	
}



ISR(ADC_vect){ //ADC completion ISR
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	ef 93       	push	r30
 188:	ff 93       	push	r31
		//ADMUX &= 0b11111000;
	//}
	//else{ADMUX++;}

//	OCR1A = mapped(ADC);
	Ser0_LR_LeftEye++;
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 192:	01 96       	adiw	r24, 0x01	; 1
 194:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(Ser0_LR_LeftEye==3999)
 19c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1a4:	8f 39       	cpi	r24, 0x9F	; 159
 1a6:	9f 40       	sbci	r25, 0x0F	; 15
 1a8:	29 f4       	brne	.+10     	; 0x1b4 <__vector_21+0x3e>
	ADCSRA |= (1<<ADIF); //Clear interrupt flag.
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	80 83       	st	Z, r24

}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
